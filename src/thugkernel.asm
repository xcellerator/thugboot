org 0x8000				; We are loaded from memory address 0x8000
bits 16					; 16-Bit Real Mode

; Entry Point
_start:
	call clearScreen
	call setCursor
	mov si, logo			; Load address of logo into SI register
	call printCompressedString	; Print the string stored in [SI]
	call waitForKeypress		; Wait for input to repeat logo animation

	jmp $   			; Freezes the system
	hlt				; Halt's a real machine
	ret     			; Halt's QEMU

; Prints an ASCII character stored in AL
printChar:
	mov ah, 0x0e			; AH = 0x0e		; Display Character (TTY Output)
	mov bh, 0x0 			; BH = 0x0		; Page to write to
	mov bl, 0x0			; BL = 0x0		; Foreground Colour
	int 0x10 			; Graphics Interrupt	; Nothing Returned
	ret

; Delay 5 milliseconds (used in-between printing characters for a cheap animation)
delay:
	pusha				; Prologue - Save registers to stack
	mov ah, 0x86			; AH = 0x86		; BIOS wait
	mov al, 0			; AL = 0		; Not used
	mov cx, 0			; CX = 0		; Seconds
	mov dx, 5			; DX = 5		; Milliseconds
	int 0x15			; Memory Interrupt	; AH = Status
	popa				; Epilogue - Restore registers from stack
	ret
	
; Print a compressed NULL-terminated string with memory location stored in SI
printCompressedString:
	pusha		; Prologue - Save registers to stack
	.process:
	mov eax, [esi]	; Store logo pointer in EAX, so we can address AH
	cmp eax, 0h	; CHeck if we've reached the end of the compressed string
	jz .finished	; if so, jump to .finished
	mov cl, [esi]	; ECX = count
	inc esi		; ESI = char
	.printLoop:
		mov al, [esi]	; Store char in AL
		call printChar	; Print the character in AL
		dec ecx		; Decrement count
		call delay	; Cheap animation
		cmp ecx, 0h	; CHeck if we've printed everything
		jz .nextChar
		jmp .printLoop	; Loop
	.nextChar:
		inc esi		; ESI = count
		jmp .process
	.finished:
		popa	; Epilogue - Restore registers from stack
		ret

; Sit idle until a keypress is received, then jump to 0x8000
waitForKeypress:
	pusha				; Prologue - Save registers to stack
	mov ah, 0x0			; AH = 0x0		; Get keystroke
	int 0x16			; Keyboard Interrupt	; AH = BIOS Scan Code, AL = ASCII Char
	popa				; Epilogue - Restore registers from stack
	jmp _start			; Jump to 0x8000 (Repeat the animation)

; Clear the entire screen (BIOS Splash, etc)
clearScreen:
	pusha				; Prologue - Save registers to stack
	mov ah, 0x06			; AH = 0x06		; Scroll Up Window
	xor al, al			; AL = 0x00		; Number of lines (0x00 to scroll entire window)
	mov bh, 0x03			; BH = 0x03		; Colour Attribute
	xor cx, cx			; CH = 0x00, CL = 0x00	; Row,Column of Upper-Left Hand Corner
	mov dx, 0x184F			; DH = 0x18, DL = 0x4F	; Row,Column of Lower-Right Hand Corner
	int 0x10			; Graphics Interrupt	; Nothing returned
	popa				; Epilogue - Restore registers from stack
	ret

; Position the cursor in the right position before we start printing text
setCursor:
	pusha				; Prologue - Save registers to stack
	mov ah, 0x02			; AH = 0x02		; Set Cursor Position
	mov bh, 0x00			; BH = 0x00		; Page Number (0x00 = Graphics Mode)
	mov dh, 2			; DH = 2		; Row (Almost the top of the screen)
	mov dl, 0			; DL = 2		; Column (Far left side of the screen)
	int 0x10			; Graphics Interrupt	; Nothing returned
	popa				; Epilogue - Restore registers from stack
	ret

logo    db      0x11 , 0x20 , 0x0e , 0x5f , 0x05 , 0x20 , 0x06 , 0x5f , 0x06 , 0x20 , 0x03 , 0x5f , 0x01 , 0x0a , 0x01 , 0x0d , 0x11 , 0x20 , 0x01 , 0x5c , 0x03 , 0x20 , 0x01 , 0x5f , 0x04 , 0x20 , 0x01 , 0x5f , 0x03 , 0x20 , 0x01 , 0x2f , 0x04 , 0x2d , 0x01 , 0x2f , 0x05 , 0x20 , 0x01 , 0x2f , 0x05 , 0x5f , 0x01 , 0x2f , 0x03 , 0x20 , 0x01 , 0x5c , 0x08 , 0x5f , 0x01 , 0x0a , 0x01 , 0x0d , 0x11 , 0x20 , 0x01 , 0x2f , 0x03 , 0x5f , 0x01 , 0x2f , 0x04 , 0x20 , 0x01 , 0x2f , 0x03 , 0x5f , 0x01 , 0x5c , 0x02 , 0x20 , 0x01 , 0x5f , 0x01 , 0x2f , 0x05 , 0x20 , 0x02 , 0x2f , 0x04 , 0x20 , 0x01 , 0x2f , 0x04 , 0x20 , 0x01 , 0x2f , 0x03 , 0x20 , 0x01 , 0x5f , 0x04 , 0x20 , 0x01 , 0x5c , 0x01 , 0x0a , 0x01 , 0x0d , 0x14 , 0x20 , 0x01 , 0x2f , 0x04 , 0x20 , 0x02 , 0x2f , 0x06 , 0x20 , 0x01 , 0x5c , 0x05 , 0x20 , 0x02 , 0x2f , 0x04 , 0x20 , 0x01 , 0x2f , 0x04 , 0x20 , 0x01 , 0x2f , 0x04 , 0x20 , 0x01 , 0x2f , 0x04 , 0x20 , 0x01 , 0x2f , 0x01 , 0x0a , 0x01 , 0x0d , 0x13 , 0x20 , 0x01 , 0x2f , 0x05 , 0x5f , 0x01 , 0x5c , 0x07 , 0x20 , 0x01 , 0x2f , 0x05 , 0x5f , 0x01 , 0x5c , 0x01 , 0x20 , 0x09 , 0x5f , 0x01 , 0x5c , 0x05 , 0x5f , 0x03 , 0x20 , 0x01 , 0x2f , 0x01 , 0x0a , 0x01 , 0x0d , 0x1a , 0x20 , 0x01 , 0x5c , 0x05 , 0x5f , 0x01 , 0x2f , 0x07 , 0x20 , 0x01 , 0x5c , 0x01 , 0x2f , 0x05 , 0x20 , 0x01 , 0x5c , 0x0b , 0x5f , 0x01 , 0x5c , 0x01 , 0x0a , 0x01 , 0x0d , 0x01 , 0x0a , 0x01 , 0x0d , 0x0e , 0x20 , 0x09 , 0x5f , 0x02 , 0x20 , 0x0b , 0x5f , 0x01 , 0x20 , 0x08 , 0x5f , 0x01 , 0x20 , 0x07 , 0x5f , 0x03 , 0x20 , 0x09 , 0x5f , 0x01 , 0x0a , 0x01 , 0x0d , 0x0c , 0x20 , 0x01 , 0x5f , 0x01 , 0x2f , 0x08 , 0x20 , 0x01 , 0x2f , 0x01 , 0x5f , 0x01 , 0x20 , 0x01 , 0x29 , 0x03 , 0x20 , 0x01 , 0x2e , 0x01 , 0x5f , 0x04 , 0x20 , 0x02 , 0x2f , 0x02 , 0x20 , 0x02 , 0x5f , 0x04 , 0x20 , 0x01 , 0x58 , 0x06 , 0x20 , 0x01 , 0x2f , 0x03 , 0x5f , 0x01 , 0x5c , 0x06 , 0x5f , 0x02 , 0x20 , 0x01 , 0x5c , 0x01 , 0x0a , 0x01 , 0x0d , 0x0c , 0x20 , 0x01 , 0x5c , 0x05 , 0x20 , 0x01 , 0x7c , 0x02 , 0x5f , 0x01 , 0x2f , 0x02 , 0x20 , 0x01 , 0x5c , 0x01 , 0x5f , 0x03 , 0x20 , 0x01 , 0x7c , 0x01 , 0x2f , 0x02 , 0x20 , 0x01 , 0x5f , 0x01 , 0x2f , 0x05 , 0x20 , 0x01 , 0x2f , 0x03 , 0x20 , 0x02 , 0x2f , 0x05 , 0x20 , 0x01 , 0x2f , 0x06 , 0x20 , 0x01 , 0x2f , 0x03 , 0x20 , 0x01 , 0x2f , 0x03 , 0x20 , 0x01 , 0x3e , 0x01 , 0x0a , 0x01 , 0x0d , 0x0d , 0x20 , 0x01 , 0x5c , 0x04 , 0x20 , 0x01 , 0x7c , 0x07 , 0x20 , 0x01 , 0x2f , 0x02 , 0x20 , 0x01 , 0x2f , 0x04 , 0x20 , 0x01 , 0x5c , 0x01 , 0x5f , 0x03 , 0x20 , 0x01 , 0x2f , 0x04 , 0x20 , 0x01 , 0x2f , 0x01 , 0x5f , 0x04 , 0x20 , 0x01 , 0x2f , 0x01 , 0x5c , 0x05 , 0x20 , 0x01 , 0x2f , 0x03 , 0x20 , 0x01 , 0x2f , 0x03 , 0x20 , 0x01 , 0x2f , 0x01 , 0x0a , 0x01 , 0x0d , 0x0e , 0x20 , 0x01 , 0x5c , 0x0a , 0x5f , 0x01 , 0x2f , 0x03 , 0x20 , 0x01 , 0x5c , 0x06 , 0x20 , 0x01 , 0x2f , 0x06 , 0x5f , 0x01 , 0x2f , 0x01 , 0x20 , 0x01 , 0x2f , 0x04 , 0x5f , 0x01 , 0x2f , 0x01 , 0x5c , 0x03 , 0x5f , 0x02 , 0x20 , 0x01 , 0x58 , 0x06 , 0x20 , 0x01 , 0x2f , 0x01 , 0x0a , 0x01 , 0x0d , 0x18 , 0x20 , 0x01 , 0x5c , 0x03 , 0x5f , 0x01 , 0x2f , 0x01 , 0x20 , 0x01 , 0x5c , 0x04 , 0x5f , 0x01 , 0x2f , 0x13 , 0x20 , 0x01 , 0x5c , 0x01 , 0x2f , 0x01 , 0x20 , 0x01 , 0x5c , 0x04 , 0x5f , 0x01 , 0x2f , 0x01 , 0x0a , 0x01 , 0x0d , 0x01 , 0x0a , 0x01 , 0x0d , 0x1e , 0x20 , 0x03 , 0x77 , 0x01 , 0x2e , 0x01 , 0x74 , 0x01 , 0x68 , 0x01 , 0x75 , 0x01 , 0x67 , 0x01 , 0x63 , 0x01 , 0x72 , 0x01 , 0x6f , 0x01 , 0x77 , 0x01 , 0x64 , 0x01 , 0x2e , 0x01 , 0x63 , 0x01 , 0x6f , 0x01 , 0x6d , 0x01 , 0x00


times 1024-($-$$) db 0 			; Kernel needs to be a multiple of 512, so pad to correct size
